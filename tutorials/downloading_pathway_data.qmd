---
title: "Tutorial - Downloading and Formatting Pathway Data"
author: "Shackett"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format:
  html:
    embed-resources: true
    code-fold: true
    code-summary: "Show the code"
    toc: true
    theme: minty
    highlight: tango
    code-block-bg: true
    code-block-border-left: "#5BB867"
jupyter: open_cpr_tutorials
---

This notebook provides examples for downloading pathway information from a variety of data sources and formatting the results as `sbml_dfs` objects. Since it is often not possible to download just a subset of a data source for demonstration purposes, this notebook will download and cache raw and intermediate representations of each data source.

```{python}
#| label: config
import logging
logger = logging.getLogger()
logger.setLevel("INFO")

import tutorial_utils
config = tutorial_utils.CprConfig("config.yaml", "downloading_pathway_data")
```

```{python}
#| label: environment

import pickle

from cpr import utils
from cpr.ingestion import bigg
from cpr.ingestion import psi_mi
from cpr.ingestion import reactome
from cpr.ingestion import string
from cpr.ingestion import trrust

def _log(text: str):

    banner_str = "====================================\n"
    logger.info(f"\n{banner_str}{text}\n{banner_str}")

def _log_skipped(uri: str):
    """ Log that a step was skipped. """
    logger.info(f"{uri} exists or overwrite = False")

```

```{python}
#| label: globals
OVERWRITE = config.overwrite
SPECIES = config.species
FN_BIGG_SBML_DIR = config.artifacts["bigg_sbml_dir"]
FN_BIGG_SBML_DFS = config.artifacts["bigg_sbml_dfs"]
FN_INTACT_DIR = config.artifacts["intact_dir"]
FN_INTACT_SBML_DFS = config.artifacts["intact_sbml_dfs"]
FN_REACTOME_SBML_DIR = config.artifacts["reactome_sbml_dir"]
FN_REACTOME_SBML_DFS = config.artifacts["reactome_sbml_dfs"]
FN_STRING_ALIASES = config.artifacts["string_aliases"]
FN_STRING_INTERACTIONS = config.artifacts["string_interactions"]
FN_STRING_SBML_DFS = config.artifacts["string_sbml_dfs"]
FN_TRRUST_RAW = config.artifacts["trrust_raw"]
FN_TRRUST_SBML_DFS = config.artifacts["trrust_sbml_dfs"]
```

# Species Agnostic Sources

These sources include pathway information which can be broadly applied to a range of species. 

## STRING

```{python}
#| label: string

if not utils.path_exists(FN_STRING_INTERACTIONS) or OVERWRITE:
    _log(f"Downloading STRING interactions to {FN_STRING_INTERACTIONS}")
    string.download_string(FN_STRING_INTERACTIONS, species = SPECIES)
else:
    _log_skipped(FN_STRING_INTERACTIONS)

if not utils.path_exists(FN_STRING_ALIASES) or OVERWRITE:
    _log(f"Downloading STRING aliases (systematic identifiers) to {FN_STRING_ALIASES}")
    string.download_string_aliases(FN_STRING_ALIASES, species = SPECIES)
else:
    _log_skipped(FN_STRING_ALIASES)

if not utils.path_exists(FN_STRING_SBML_DFS) or OVERWRITE:
    _log(f"Combining interactions and aliases to create the STRING sbml_dfs at {FN_STRING_SBML_DFS}")

    sbml_dfs = string.convert_string_to_sbml_dfs(
        FN_STRING_INTERACTIONS,
        FN_STRING_ALIASES
    )
    sbml_dfs.validate()

    utils.save_pickle(FN_STRING_SBML_DFS, sbml_dfs)

else:
    _log_skipped(FN_STRING_SBML_DFS)
```

# Species-Biased Sources

These sources inform multiple species but their focal point is a single species. Here which has additional types of data 

## Reactome

```{python}
#| label: reactome

if not os.path.isdir(REACTOME_SBML_DIR) or OVERWRITE:
    _log(f"Download the Reactome pan-species tar-ball and unpack to a directory of .sbml files at {REACTOME_SBML_DIR}")
    reactome.reactome_sbml_download(REACTOME_SBML_DIR, overwrite=OVERWRITE)
else:
    _log_skipped(REACTOME_SBML_DIR)

if not utils.path_exists(FN_REACTOME_SBML_DFS) or OVERWRITE:
    _log(f"Merging Reactome .sbml files into an sbml_dfs model at {FN_REACTOME_SBML_DFS}")

    pw_index_uri = os.path.join(REACTOME_SBML_DIR, "pw_index.tsv")
    sbml_dfs = reactome.construct_reactome_consensus(
        pw_index_uri, species=SPECIES, strict=False
    )
    sbml_dfs.validate()

    utils.save_pickle(FN_REACTOME_SBML_DFS, sbml_dfs)
else:
    _log_skipped(FN_REACTOME_SBML_DFS)
```

## BiGG (metabolic models)

```{python}
#| label: bigg

if not os.path.isdir(FN_BIGG_SBML_DIR) or OVERWRITE:
    _log(f"Download multiple BiGG metabolic models to {FN_BIGG_SBML_DIR}")
    bigg.bigg_sbml_download(FN_BIGG_SBML_DIR, overwrite = OVERWRITE)
else:
    _log_skipped(FN_BIGG_SBML_DIR)

if not utils.path_exists(FN_BIGG_SBML_DFS) or OVERWRITE:
    _log(f"Formatting a BiGG .sbml model as a sbml_dfs model at {FN_BIGG_SBML_DFS}")

    pw_index_uri = os.path.join(FN_BIGG_SBML_DIR, "pw_index.tsv")
    sbml_dfs = bigg.construct_bigg_consensus(pw_index_uri, species=SPECIES)
    sbml_dfs.validate()

    utils.save_pickle(FN_BIGG_SBML_DFS, sbml_dfs)
else:
    _log_skipped(FN_BIGG_SBML_DFS)
```

# Species-Specific Sources

## TRRUST

```{python}
#| label: trrust 

if not utils.path_exists(FN_TRRUST_RAW) or OVERWRITE:
    _log(f"Downloading TRRUST to {FN_TRRUST_RAW}")
    trrust.download_trrust(FN_TRRUST_RAW)
else:
    _log_skipped(FN_TRRUST_RAW)

if not utils.path_exists(FN_TRRUST_SBML_DFS) or OVERWRITE:
    _log(f"Processing TRRUST as sbml_dfs at {FN_TRRUST_SBML_DFS}")
    sbml_dfs = trrust.convert_trrust_to_sbml_dfs(FN_TRRUST_RAW)
    sbml_dfs.validate()

    utils.save_pickle(FN_TRRUST_SBML_DFS, sbml_dfs)
else:
    _log_skipped(FN_TRRUST_SBML_DFS)
```

## IDEA
