---
title: "Create Test Pathway"
author: "Shackett"
date: "2025-01-29"
format:
  html:
    embed-resources: true
    code-fold: false
    toc: true
    theme: minty
    highlight: tango
    code-block-bg: true
    code-block-border-left: "#5BB867"
---

## Intro

This workflow is intended to create a simple pathway representation and its related outputs for testing and demonstrating CPR's functionality.

It follows a similar structure to `create_human_consensus.qmd` but includes fewer data sources

```{r python_config}
# you should run this from the dev directory or cd to this dir
reticulate::use_virtualenv("./.venv", required = TRUE)
reticulate::py_config()
```

```{bash which_python}
which python
python --version
```

```{bash env_config}
yaml() {
    python3 -c "import yaml;print(yaml.safe_load(open('$1'))$2)"
}

# https://stackoverflow.com/questions/60569395/set-environment-variable-in-bash-in-rmarkdown
WORKING_DIRECTORY="napistu_data/test_pathway" # set this to a path in your local directory
CACHE_DIRECTORY="cache"
EXPORT_DIRECTORY="test_pathway"
SBML_DFS_FILE="sbml_dfs.pkl"
SBML_DFS_TABLES_DIR="sbml_dfs_tables"
REGULATORY_GRAPH_FILE="napistu_graph.pkl"
REGULATORY_DISTANCES_FILE="precomputed_distances.parquet"
IDENTIFIERS_FILE="species_identifiers.tsv"
SOURCE_COUNTS_FILE="reactions_source_total_counts.tsv"

# create paths
CACHE_DIR_PATH=$WORKING_DIRECTORY/$CACHE_DIRECTORY
EXPORT_DIR_PATH=$WORKING_DIRECTORY/$EXPORT_DIRECTORY
SBML_DFS_OUT_PATH=$EXPORT_DIR_PATH/$SBML_DFS_FILE
REGULATORY_GRAPH_OUT_PATH=$EXPORT_DIR_PATH/$REGULATORY_GRAPH_FILE
REGULATORY_DISTANCES_OUT_PATH=$EXPORT_DIR_PATH/$REGULATORY_DISTANCES_FILE
# we don't care about all of the table exports for the GCS data package; just the identifiers & source counts
SBML_DFS_TABLES_OUT_PATH=$CACHE_DIR_PATH/$SBML_DFS_TABLES_DIR
IDENTIFIERS_OUT_PATH=$EXPORT_DIR_PATH/$IDENTIFIERS_FILE
SOURCE_COUNTS_OUT_PATH=$EXPORT_DIR_PATH/$SOURCE_COUNTS_FILE

# save variables to a file so they can be sourced in other bash cells
rm -f .rvars_testpw || true
echo -n 'export CACHE_DIR_PATH=' >> .rvars_testpw
echo $CACHE_DIR_PATH >> .rvars_testpw
echo -n 'export EXPORT_DIR_PATH=' >> .rvars_testpw
echo $EXPORT_DIR_PATH >> .rvars_testpw
echo -n 'export SBML_DFS_OUT_PATH=' >> .rvars_testpw
echo $SBML_DFS_OUT_PATH >> .rvars_testpw
echo -n 'export REGULATORY_GRAPH_OUT_PATH=' >> .rvars_testpw
echo $REGULATORY_GRAPH_OUT_PATH >> .rvars_testpw
echo -n 'export REGULATORY_DISTANCES_OUT_PATH=' >> .rvars_testpw
echo $REGULATORY_DISTANCES_OUT_PATH >> .rvars_testpw
echo -n 'export SBML_DFS_TABLES_OUT_PATH=' >> .rvars_testpw
echo $SBML_DFS_TABLES_OUT_PATH >> .rvars_testpw
echo -n 'export IDENTIFIERS_OUT_PATH=' >> .rvars_testpw
echo $IDENTIFIERS_OUT_PATH >> .rvars_testpw
echo -n 'export SOURCE_COUNTS_OUT_PATH=' >> .rvars_testpw
echo $SOURCE_COUNTS_OUT_PATH >> .rvars_testpw

source .rvars_testpw
echo CACHE_DIR_PATH=$CACHE_DIR_PATH
echo EXPORT_DIR_PATH=$EXPORT_DIR_PATH
echo SBML_DFS_OUT_PATH=$SBML_DFS_OUT_PATH
echo SBML_DFS_TABLES_OUT_PATH=$SBML_DFS_TABLES_OUT_PATH
echo REGULATORY_GRAPH_OUT_PATH=$REGULATORY_GRAPH_OUT_PATH
echo REGULATORY_DISTANCES_OUT_PATH=$REGULATORY_DISTANCES_OUT_PATH
echo IDENTIFIERS_OUT_PATH=$IDENTIFIERS_OUT_PATH
echo SOURCE_COUNTS_OUT_PATH=$SOURCE_COUNTS_OUT_PATH
```

## Reactome

```{bash reactome}
source .rvars_testpw
# make the directory if needed
mkdir -p $CACHE_DIR_PATH/reactome

cp ../lib/napistu-py/src/tests/test_data/pw_index_metabolism.tsv $CACHE_DIR_PATH/reactome/
cp ../lib/napistu-py/src/tests/test_data/reactome_glucose_metabolism.sbml $CACHE_DIR_PATH/reactome/
cp ../lib/napistu-py/src/tests/test_data/reactome_glycolysis.sbml $CACHE_DIR_PATH/reactome/
cp ../lib/napistu-py/src/tests/test_data/reactome_ppp.sbml $CACHE_DIR_PATH/reactome/
cp ../lib/napistu-py/src/tests/test_data/reactome_tca.sbml $CACHE_DIR_PATH/reactome/

python -m napistu integrate reactome --overwrite $CACHE_DIR_PATH/reactome/pw_index_metabolism.tsv $CACHE_DIR_PATH/reactome.pkl
```

## Remove cofactors

```{bash remove_cofactors}
source .rvars_testpw
input_uri=$CACHE_DIR_PATH/reactome.pkl
output_uri=$SBML_DFS_OUT_PATH

python -m napistu refine drop_cofactors $input_uri $output_uri
```

## igraph

```{bash export_igraph}
source .rvars_testpw
input_uri=$SBML_DFS_OUT_PATH
output_uri=$REGULATORY_GRAPH_OUT_PATH

if [[ -f $input_uri ]] ; then
    echo "Generating a regulatory graph from $input_uri and saving results to $output_uri"
    python -m napistu exporter export_igraph -g regulatory $input_uri $output_uri
else
    echo "Missing $input_uri"
fi
```

## Export precomputed distances

```{bash export_distances}
source .rvars_testpw
input_uri=$REGULATORY_GRAPH_OUT_PATH
output_uri=$REGULATORY_DISTANCES_OUT_PATH

echo "Saving species-to-species distances to $output_uri using the $input_uri graph"
python -m napistu exporter export_precomputed_distances -s 10 $input_uri $output_uri
```

## smbl_dfs_tables

```{bash export_smbl_dfs_tables}
source .rvars_testpw
input_uri=$SBML_DFS_OUT_PATH
output_uri=$SBML_DFS_TABLES_OUT_PATH

python -m napistu exporter export_smbl_dfs_tables $input_uri $output_uri
```

## Relocate sbml_dfs tables

```{bash}
source .rvars_testpw
cp $SBML_DFS_TABLES_OUT_PATH/species_identifiers.tsv $IDENTIFIERS_OUT_PATH
cp $SBML_DFS_TABLES_OUT_PATH/reactions_source_total_counts.tsv $SOURCE_COUNTS_OUT_PATH
```

# Bundle the final artifacts and upload to GCS

## Validate files

```{bash}
source .rvars_testpw

sbml_dfs_uri=$SBML_DFS_OUT_PATH
napistu_graph_uri=$REGULATORY_GRAPH_OUT_PATH
precomputed_distances_uri=$REGULATORY_DISTANCES_OUT_PATH
identifiers_uri=$IDENTIFIERS_OUT_PATH

if [[ ! -f "$sbml_dfs_uri" ]]; then
    echo "ERROR: SBML_dfs file not found: $sbml_dfs_uri"
    exit 1
fi

if [[ ! -f "$napistu_graph_uri" ]]; then
    echo "ERROR: NapistuGraph file not found: $napistu_graph_uri"
    exit 1
fi

if [[ ! -f "$precomputed_distances_uri" ]]; then
    echo "ERROR: Precomputed distances file not found: $precomputed_distances_uri"
    exit 1
fi

if [[ ! -f "$identifiers_uri" ]]; then
    echo "ERROR: Identifiers file not found: $identifiers_uri"
    exit 1
fi

echo "All paths validated successfully!"

python -m napistu helpers validate_assets \
    "$sbml_dfs_uri" \
    --napistu-graph-uri "$napistu_graph_uri" \
    --precomputed-distances-uri "$precomputed_distances_uri" \
    --identifiers-df-uri "$identifiers_uri" 
```

## Tar and gzip

```{bash targz}
source .rvars_testpw
tar_gz_uri=$CACHE_DIR_PATH/test_pathway.tar.gz
echo "Taring and g-zipping the $EXPORT_DIR_PATH as $tar_gz_uri"

tar -czvf $tar_gz_uri -C $EXPORT_DIR_PATH --exclude=".DS_Store" .
```

## Sync with GCS

```{bash gcs_upload}
source .rvars_testpw
gcloud config set project shackett-napistu-public
gsutil -h "Cache-Control:no-cache" cp $CACHE_DIR_PATH/test_pathway.tar.gz gs://shackett-napistu-public/test_pathway.tar.gz
```
